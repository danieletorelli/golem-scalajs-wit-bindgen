
                // Generated by golem-scalajs-wit-bindgen
                package tests

                import scala.scalajs.js
                import scala.scalajs.js.JSConverters._

                
                sealed trait User extends js.Object {
                    val userId: Integer
val name: String
val email: String
                }
                object User {
                    def apply(userId: Integer, name: String, email: String): User = {
                        val userId0: Integer = userId
val name0: String = name
val email0: String = email

                        new User {
                            val userId: Integer = userId0
val name: String = name0
val email: String = email0
                        }
                    }
                }
            

                

                trait Api {
                    type WitResult[+Ok, +Err] = Ok
                    object WitResult {
                        def ok[Ok](value: Ok): WitResult[Ok, Nothing] = value

                        def err[Err](value: Err): WitResult[Nothing, Err] = throw js.JavaScriptException(value)

                        val unit: WitResult[Unit, Nothing] = ()
                    }

                    type WitOption[+A] = js.UndefOr[A]
                    object WitOption {
                        def some[A](value: A): WitOption[A] = value

                        val none: WitOption[Nothing] = js.undefined

                        def fromOption[A](option: Option[A]) =
                        option match {
                            case Some(value) => value.asInstanceOf[js.UndefOr[A]]
                            case None        => js.undefined
                        }
                    }

                    type WitList[A] = js.Array[A]
                    object WitList {
                        def fromList[A](list: List[A]): WitList[A] = list.toJSArray
                    }
                    
                    def createUser(name: String, email: String): Integer
def getUser(userId: Integer): (String, String)
def deleteUser(userId: Integer): Boolean
                }
            