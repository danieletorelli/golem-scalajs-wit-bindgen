
                // Generated by golem-scalajs-wit-bindgen
                package tests

                import scala.scalajs.js
                import scala.scalajs.js.JSConverters._

                
                sealed trait ProductItem extends js.Object {
                    val productId: String
val name: String
val price: Float
val quantity: Integer
                }
                object ProductItem {
                    def apply(productId: String, name: String, price: Float, quantity: Integer): ProductItem = {
                        val productId0: String = productId
val name0: String = name
val price0: Float = price
val quantity0: Integer = quantity

                        new ProductItem {
                            val productId: String = productId0
val name: String = name0
val price: Float = price0
val quantity: Integer = quantity0
                        }
                    }
                }
            

                sealed trait OrderConfirmation extends js.Object {
                    val orderId: String
                }
                object OrderConfirmation {
                    def apply(orderId: String): OrderConfirmation = {
                        val orderId0: String = orderId

                        new OrderConfirmation {
                            val orderId: String = orderId0
                        }
                    }
                }
            

                
                sealed trait CheckoutResult extends js.Object { self =>
                    type Type

                    val tag: String
                    val `val`: js.UndefOr[Type]
                }

                object CheckoutResult {
                    
                            def error(value: String) = new CheckoutResult {
                                type Type = String
                                
                                val tag: String = "error"
                                override val `val`: js.UndefOr[Type] = value
                            }
                        

                            def success(value: OrderConfirmation) = new CheckoutResult {
                                type Type = OrderConfirmation
                                
                                val tag: String = "success"
                                override val `val`: js.UndefOr[Type] = value
                            }
                        
                }
            

                trait Api {
                    type WitResult[+Ok, +Err] = Ok
                    object WitResult {
                        def ok[Ok](value: Ok): WitResult[Ok, Nothing] = value

                        def err[Err](value: Err): WitResult[Nothing, Err] = throw js.JavaScriptException(value)

                        val unit: WitResult[Unit, Nothing] = ()
                    }

                    type WitOption[+A] = js.UndefOr[A]
                    object WitOption {
                        def some[A](value: A): WitOption[A] = value

                        val none: WitOption[Nothing] = js.undefined

                        def fromOption[A](option: Option[A]) =
                        option match {
                            case Some(value) => value.asInstanceOf[js.UndefOr[A]]
                            case None        => js.undefined
                        }
                    }

                    type WitList[A] = js.Array[A]
                    object WitList {
                        def fromList[A](list: List[A]): WitList[A] = list.toJSArray
                    }
                    
                    def initializeCart(userId: String): WitResult[String, String]
def addItem(item: ProductItem): Unit
def removeItem(productId: String): Unit
def updateItemQuantity(productId: String, quantity: Integer): Unit
def checkout(): CheckoutResult
def getCartContents(): WitList[ProductItem]
def getFirstItem(): WitOption[ProductItem]
                }
            